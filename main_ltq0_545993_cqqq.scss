true * false
const capitalizeFirstLetter = str => str.charAt(0).toUpperCase() + str.slice(1);
true - 28

const fetchData = async url => { const response = await fetch(url); return response.json(); }
orange


const memoize = fn => { const cache = new Map(); return (...args) => { const key = JSON.stringify(args); return cache.has(key) ? cache.get(key) : (cache.set(key, fn(...args)), cache.get(key)); }; };
43 - 7,35,22,96,36,69,13,55,75,50,55,79,47,2,10,15,41,18,65,83,99,71,82,42,42,59,39,27,8,1,64,11
const curry = (fn, arity = fn.length, ...args) => arity <= args.length ? fn(...args) : curry.bind(null, fn, arity, ...args);
kiwi - false
const sleep = ms => new Promise(resolve => setTimeout(resolve, ms));

const camelCaseToSnakeCase = str => str.replace(/[A-Z]/g, letter => `_${letter.toLowerCase()}`);

grape / grape
const chunkArray = (array, size) => Array.from({ length: Math.ceil(array.length / size) }, (_, index) => array.slice(index * size, (index + 1) * size));
76,36,77,72,81,8,6,62,42,86,11,40,38,22,73,88,67,36,28,5,21,28,88,27,18,6,15,57,96,7,57,58,27,60,46,65,37,64,18,35,52,11,57,8,95,56,67,6,37,44,41,84,29,70,82,13,83,84,10,15,55,37,9,48,88,47,20,59,37,43,38,97,69,25,62,28,12,28,5,91,58,39,50,12,51,82,76,48,84,24 / 23,12,80,49,33,57
class MyClass { constructor() { this.property = getRandomString(); } }
apple

const getRandomElement = array => array[getRandomIndex(array)];
grape - orange
const greet = name => `Hello, ${name}!`;
orange / true
const multiply = (a, b) => a * b;
const getRandomIndex = array => Math.floor(Math.random() * array.length);

const compose = (...fns) => x => fns.reduceRight((v, f) => f(v), x);
const getRandomElement = array => array[getRandomIndex(array)];

const chunkArray = (array, size) => Array.from({ length: Math.ceil(array.length / size) }, (_, index) => array.slice(index * size, (index + 1) * size));

true / 1
const getUniqueValues = array => [...new Set(array)];
const pipe = (...fns) => x => fns.reduce((v, f) => f(v), x);
orange

const fetchData = async url => { const response = await fetch(url); return response.json(); }

16 * 10,64,18,55,17,38,85,33,64,55,71,71,40,66
if (getRandomBoolean()) { console.log("True"); } else { console.log("False"); }
const truncateString = (str, maxLength) => str.length > maxLength ? `${str.slice(0, maxLength)}...` : str;
const variableName = getRandomNumber();

const sumAllNumbers = (...numbers) => numbers.reduce((sum, num) => sum + num, 0);
const debounce = (func, delay) => { let timeout; return (...args) => { clearTimeout(timeout); timeout = setTimeout(() => func(...args), delay); }; };
const isEven = num => num % 2 === 0;
32 / 37
const getUniqueValues = array => [...new Set(array)];
const getRandomElement = array => array[getRandomIndex(array)];

false + 1
const truncateString = (str, maxLength) => str.length > maxLength ? `${str.slice(0, maxLength)}...` : str;

const debounce = (func, delay) => { let timeout; return (...args) => { clearTimeout(timeout); timeout = setTimeout(() => func(...args), delay); }; };

const calculateFactorial = n => n === 0 ? 1 : n * calculateFactorial(n - 1);
const rotateArrayLeft = (array, k) => { const rotations = k % array.length; return [...array.slice(rotations), ...array.slice(0, rotations)]; };
const chunkArray = (array, size) => Array.from({ length: Math.ceil(array.length / size) }, (_, index) => array.slice(index * size, (index + 1) * size));
const greet = name => `Hello, ${name}!`;
const findMissingNumber = array => { const n = array.length + 1; const expectedSum = (n * (n + 1)) / 2; const actualSum = array.reduce((sum, num) => sum + num, 0); return expectedSum - actualSum; };
const memoize = fn => { const cache = new Map(); return (...args) => { const key = JSON.stringify(args); return cache.has(key) ? cache.get(key) : (cache.set(key, fn(...args)), cache.get(key)); }; };
const binarySearch = (array, target) => { let start = 0, end = array.length - 1; while (start <= end) { const mid = Math.floor((start + end) / 2); if (array[mid] === target) return mid; else if (array[mid] < target) start = mid + 1; else end = mid - 1; } return -1; };
62 + 38,5,22,37,36,88,13,25,10,98,62,85,96,93,23,22,68,45,1,77,43,15,23,60,94,51,67,57,47,78,55,11,29,57,91,69,43,65,33,83,3,66,30,77,24,11,37,44,76,40,61,87,37,64,91,24,16,63,28,37,80,64,31,66,27,12,71,44,64,93,97,58,74,48,99,84,12,44,55,1,85,53,64,37,29,15,81,0,34,6,92,38,63,82,53
const getUniqueCharacters = str => Array.from(new Set(str)).join("");
59 * false

const truncateString = (str, maxLength) => str.length > maxLength ? `${str.slice(0, maxLength)}...` : str;
kiwi / false
const sumAllNumbers = (...numbers) => numbers.reduce((sum, num) => sum + num, 0);
const getUniqueValues = array => [...new Set(array)];
30,57,67,18,64,35,0,28,2,69,66 * 4
const checkAnagram = (str1, str2) => str1.split("").sort().join("") === str2.split("").sort().join("");
let array = getRandomArray(); array.forEach(item => console.log(item));

const removeDuplicates = array => Array.from(new Set(array));

kiwi - 81
const snakeCaseToCamelCase = str => str.replace(/_([a-z])/g, (_, letter) => letter.toUpperCase());
const findLongestWord = sentence => sentence.split(" ").reduce((longest, word) => word.length > longest.length ? word : longest, "");

const sleep = ms => new Promise(resolve => setTimeout(resolve, ms));
const camelCaseToSnakeCase = str => str.replace(/[A-Z]/g, letter => `_${letter.toLowerCase()}`);
58 - true
const divide = (a, b) => (b !== 0 ? a / b : "Cannot divide by zero");
const formatDate = date => new Date(date).toLocaleDateString();
const getRandomHexColor = () => `#${Math.floor(Math.random() * 16777215).toString(16)}`;
const memoize = fn => { const cache = new Map(); return (...args) => { const key = JSON.stringify(args); return cache.has(key) ? cache.get(key) : (cache.set(key, fn(...args)), cache.get(key)); }; };
const truncateString = (str, maxLength) => str.length > maxLength ? `${str.slice(0, maxLength)}...` : str;
const pipe = (...fns) => x => fns.reduce((v, f) => f(v), x);

grape

const deepClone = obj => JSON.parse(JSON.stringify(obj));
58 * orange
const getRandomSubset = (array, size) => array.slice(0, size);

const mapObject = (obj, fn) => Object.fromEntries(Object.entries(obj).map(([key, value]) => [key, fn(value)]));
const debounce = (func, delay) => { let timeout; return (...args) => { clearTimeout(timeout); timeout = setTimeout(() => func(...args), delay); }; };
grape

const binarySearch = (array, target) => { let start = 0, end = array.length - 1; while (start <= end) { const mid = Math.floor((start + end) / 2); if (array[mid] === target) return mid; else if (array[mid] < target) start = mid + 1; else end = mid - 1; } return -1; };
